{
  "project_name": "Code Enhancer",
  "description": "Claude CLI Automation Toolkit - A comprehensive automation framework for programmatically interacting with Anthropic's Claude CLI across multiple platforms",
  "version": "2.0.0",
  "last_updated": "2025-07-10",
  "structure": {
    "directories": {
      "root": {
        "path": "/home/laurelin/projects/code_enhancer",
        "description": "Main project directory containing core automation and capture scripts"
      },
      "bin": {
        "path": "/home/laurelin/projects/code_enhancer/bin",
        "description": "Auxiliary scripts, utilities, and core implementations"
      },
      "venv_cc_enhancer": {
        "path": "/home/laurelin/projects/code_enhancer/venv_cc_enhancer",
        "description": "Python virtual environment for project dependencies"
      }
    },
    "files": {
      "python_files": {
        "main_scripts": [
          {
            "file": "claude_capture.py",
            "description": "Smart Claude output capture with automatic permission detection",
            "classes": [],
            "functions": ["detect_needs_permissions", "smart_claude_capture", "main"],
            "dependencies": ["sys", "re", "capture_claude_simple"],
            "features": [
              "Auto-detects when permissions are needed",
              "Retries automatically if Claude asks for permissions",
              "User-friendly interface with clear feedback"
            ]
          },
          {
            "file": "claude_auto.py",
            "description": "Simple Claude wrapper that always auto-approves permissions",
            "classes": [],
            "functions": ["main"],
            "dependencies": ["sys", "capture_claude_simple"],
            "features": [
              "Always runs with --dangerously-skip-permissions",
              "Minimal friction for trusted operations",
              "Direct output to stdout"
            ]
          },
          {
            "file": "run_claude_wsl.py",
            "description": "Main WSL-optimized automation script with multiple methods for running Claude CLI",
            "classes": [
              {
                "name": "Config",
                "methods": ["__init__", "load", "get_platform_config", "get_terminal_config"],
                "description": "Configuration management for terminal automation"
              },
              {
                "name": "TerminalDetector",
                "methods": ["__init__", "detect_platform", "detect_terminal", "is_wsl"],
                "description": "Cross-platform terminal detection and identification"
              },
              {
                "name": "ClaudeAutomation",
                "methods": ["__init__", "find_claude_path", "open_terminal", "run_claude", "run"],
                "description": "Main automation controller for Claude CLI execution"
              }
            ],
            "functions": ["setup_logging", "main"],
            "dependencies": ["subprocess", "time", "logging", "pathlib", "json", "argparse", "platform", "os", "shutil", "pyautogui", "click"]
          },
          {
            "file": "example_claude_capture.py",
            "description": "Examples demonstrating various Claude capture use cases",
            "classes": [],
            "functions": [
              "example_simple_capture",
              "example_batch_processing",
              "example_code_generation",
              "example_with_context",
              "main"
            ],
            "dependencies": ["sys", "time", "capture_claude_simple"]
          }
        ],
        "bin_scripts": [
          {
            "file": "bin/capture_claude_simple.py",
            "description": "Core implementation for capturing Claude output using --print mode",
            "classes": [],
            "functions": ["capture_claude_print", "main"],
            "dependencies": ["subprocess", "sys", "time", "pathlib", "datetime"],
            "features": [
              "Uses Claude's --print flag for reliable output",
              "Optional --dangerously-skip-permissions support",
              "Configurable timeout and verbose logging"
            ]
          },
          {
            "file": "bin/claude_auto_responder.py",
            "description": "Interactive Claude automation with permission prompt detection",
            "classes": [
              {
                "name": "ClaudeAutoResponder",
                "methods": [
                  "__init__", "log", "detect_permission_prompt", "read_output",
                  "save_logs", "run_claude_interactive"
                ],
                "description": "Handles automated responses to Claude's permission prompts"
              }
            ],
            "functions": ["main"],
            "dependencies": ["subprocess", "sys", "os", "time", "threading", "queue", "pathlib", "click", "re", "datetime", "json"],
            "features": [
              "Enhanced logging with timestamps and tags",
              "Automatic detection of 'Do you want to...' prompts",
              "Configurable timeout mechanism",
              "Detailed process monitoring"
            ]
          },
          {
            "file": "bin/claude_auto_responder_pty.py",
            "description": "PTY-based Claude automation for true interactive mode",
            "classes": [
              {
                "name": "ClaudePTYAutoResponder",
                "methods": [
                  "__init__", "log", "remove_ansi_codes", "detect_permission_prompt",
                  "save_logs", "run_claude_interactive"
                ],
                "description": "PTY-based automation for Claude's interactive mode"
              }
            ],
            "functions": ["main"],
            "dependencies": ["os", "pty", "subprocess", "select", "time", "sys", "re", "json", "fcntl", "termios", "struct", "pathlib", "click", "datetime"],
            "features": [
              "Uses pseudo-terminal for full interactive support",
              "Handles ANSI escape codes and terminal UI",
              "Real-time output display with clean formatting"
            ]
          },
          {
            "file": "bin/diagnose_claude.py",
            "description": "Diagnostic tool for troubleshooting Claude CLI installation and behavior",
            "classes": [],
            "functions": ["test_claude_direct", "test_claude_interactive", "test_claude_env", "main"],
            "dependencies": ["subprocess", "sys", "time", "os"]
          }
        ]
      },
      "configuration_files": [
        {
          "file": "config.json",
          "description": "Default configuration for terminal automation timing and preferences",
          "structure": {
            "terminal_spawn_delay": "Time to wait for terminal to open",
            "claude_wait_time": "Time to wait for Claude to start",
            "keyboard_delay": "Delay between keyboard actions",
            "platforms": "Platform-specific terminal configurations"
          }
        },
        {
          "file": "requirements.txt",
          "description": "Python package dependencies",
          "key_dependencies": [
            "pyautogui==0.9.54",
            "pexpect==4.9.0",
            "click==8.1.7",
            "PyGetWindow==0.0.9",
            "Pillow==10.2.0",
            "python-xlib==0.33",
            "pyperclip==1.8.2"
          ]
        }
      ],
      "documentation_files": [
        {
          "file": "README.md",
          "description": "Main project documentation with installation and usage instructions"
        },
        {
          "file": "CLAUDE_CAPTURE_GUIDE.md",
          "description": "Comprehensive guide for capturing Claude output programmatically"
        },
        {
          "file": "General_instruction.txt",
          "description": "Project development guidelines and principles"
        }
      ],
      "shell_scripts": [
        {
          "file": "setup.sh",
          "description": "Automated setup script for project initialization"
        }
      ]
    },
    "key_features": {
      "claude_output_capture": {
        "description": "Multiple methods for capturing Claude's output programmatically",
        "implementations": [
          "Smart capture with automatic permission detection",
          "Simple capture with always-on permissions",
          "Core implementation using --print mode",
          "Interactive mode with PTY support"
        ]
      },
      "permission_handling": {
        "description": "Sophisticated handling of Claude's permission prompts",
        "features": [
          "Automatic detection of operations requiring permissions",
          "Smart retry logic when permissions are needed",
          "--dangerously-skip-permissions flag support",
          "User-friendly feedback about permission usage"
        ]
      },
      "terminal_automation": {
        "description": "Multiple methods for automating terminal interactions",
        "implementations": [
          "PyAutoGUI-based automation",
          "Direct subprocess execution",
          "Platform-specific optimizations",
          "WSL path conversion support"
        ]
      },
      "logging_and_diagnostics": {
        "description": "Comprehensive logging and diagnostic capabilities",
        "features": [
          "Enhanced logging with timestamps and feature/module tags",
          "Process lifecycle monitoring",
          "Diagnostic tools for troubleshooting",
          "Log export to JSON format"
        ]
      }
    },
    "design_principles": {
      "modularity": "Highly modular design with separate implementations for different use cases",
      "maintainability": "Clear separation of concerns and well-documented code",
      "user_experience": "Focus on ease of use with smart defaults and clear feedback",
      "robustness": "Multiple fallback options and comprehensive error handling"
    }
  }
}